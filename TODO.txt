
CRITICAL

* add to PyPI
* use in SoleScion

OPTIONAL

+ color gradients
+ opacity
+ override calculated anchor with a point from the svg
* render elliptical arcs by polygonising them
* expose elliptical arcs as circular collision boundaries
* render bezier arcs by polygonising them
* consider making automatic anchor a centroid rather than just the center
* consider animation - store multiple frames in a single svg file?

PERFORMANCE

* consider reclaiming memory by forgetting paths that are triangulated, and
  forgetting triangles that are used in a batch. (or maybe not storing them in
  the first place - make the operations more functional?)
* we can merge some of the vertices that come out of tessellation.
  (try a concave quad to debug this)


DONE

+ construct an GL_TRIANGLES batch using indexed vertices from hard-coded params
+ parse coords of a single triangle from svg (one-red-triangle.svg demo)
+ parse fill color from svg file
* invert y coords (svg y axis points down, ours points up)
* path coord lists can be comma or space separated
+ multiple loops per path (three-orange-triangles.svg demo)
+ tesselate loops with more than three vertices (green-star.svg)
+ nested loops that form holes and islands (green-star-with-hole.svg works!)
* merge the multiple GL_TRI primitives returned by tessellate() into a single
  primitive. NO! Don't. This is already done for us by Batch.
* we must preserve the ordering of paths so that they get added to the batch
  (and drawn) in the right order.
* new class, SvgBatch, which maintains an list of paths
* unfilled paths should not be tessellated
* untessellated paths should not be added to the batch
+ calculate an anchor point, offset all paths so anchor is at origin
* SvgLoader should expose aggregate attributes like width, height.
* Batch could be a property of svgloader
+ expose named paths by id, for eg. collision detection

