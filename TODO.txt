
TODO

* figure out whether we can accept the mixture of TRIANGLES, FANS and STRIPS
  produced by Tessellate. Doesn't that require drawing of multiple primitives
  within a single Batch? Why not just get a single huge primitive of
  TRIANGLES?
* new class, Svg, which maintains a dict of Paths, and exposes aggregate
  attributes like width, height, radius, so that programs like demo.py
  can easily zoom to display an SVG file at an appropriate scale.
* demo.py should zoom to display an SVG file at an appropriate scale.
+ calculate centroid anchor point if none specified
+ color gradients
+ specify an anchor point in the svg
+ opacity
+ expose named paths, for eg. collision detection
+ don't tesselate collision detection paths - because they aren't filled?

DONE

+ construct an GL_TRIANGLES batch using indexed vertices from hard-coded params
+ parse coords of a single triangle from svg (one-red-triangle.svg demo)
+ parse fill color from svg file
* invert y coords (svg y axis points down, ours points up)
* path coord lists can be comma or space separated
+ multiple loops per path (three-orange-triangles.svg demo)
+ tesselate loops with more than three vertices (green-star.svg)
+ nested loops that form holes and islands (green-star-with-hole.svg works!)

