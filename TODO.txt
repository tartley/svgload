
TODO

* SvgBatch should not add unfilled paths to the batch
* SvgBatch should expose individual paths by id
* Svg exposes aggregate attributes like width, height, radius.
* demo.py should use the exposed attributes of Svg to zoom and pan.
+ calculate a centroid anchor point, offset all paths so anchor is at origin
+ override calculated centroid with an anchor point in the svg
+ color gradients
+ opacity
+ expose named paths, for eg. collision detection
+ don't tesselate collision detection paths - because they aren't filled?
* add to PyPI
* use in SoleScion

DONE

+ construct an GL_TRIANGLES batch using indexed vertices from hard-coded params
+ parse coords of a single triangle from svg (one-red-triangle.svg demo)
+ parse fill color from svg file
* invert y coords (svg y axis points down, ours points up)
* path coord lists can be comma or space separated
+ multiple loops per path (three-orange-triangles.svg demo)
+ tesselate loops with more than three vertices (green-star.svg)
+ nested loops that form holes and islands (green-star-with-hole.svg works!)
* merge the multiple GL_TRI primitives returned by tessellate() into a single
  primitive. NO! Don't. This is already done for us by Batch.
* we must preserve the ordering of paths so that they get added to the batch
  (and drawn) in the right order.
* new class, SvgBatch, which maintains an list of paths

