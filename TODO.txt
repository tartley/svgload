
TODO

* we must preserve the ordering of paths so that they get added to the batch
  (and drawn) in the right order. Double check how render order is represented
  in the svg. Is it order of occurence, or something else?
* merge the multiple GL_TRI primitives returned by tessellate() into a single
  primitive. This must preserve the correct ordering of triangles within
  a batch.
* new class, Svg, which maintains an list of paths (ordering is important)
  accessible by id (as though they were in a dict. An ordered dict?) and
  exposes aggregate attributes like width, height, radius.
* demo.py should use the exposed attributes of Svg to zoom and pan.
+ calculate a centroid anchor point, offset all paths so anchor is at origin
+ override calculated centroid with an anchor point in the svg
+ color gradients
+ opacity
+ expose named paths, for eg. collision detection
+ don't tesselate collision detection paths - because they aren't filled?
* add to PyPI
* use in SoleScion

DONE

+ construct an GL_TRIANGLES batch using indexed vertices from hard-coded params
+ parse coords of a single triangle from svg (one-red-triangle.svg demo)
+ parse fill color from svg file
* invert y coords (svg y axis points down, ours points up)
* path coord lists can be comma or space separated
+ multiple loops per path (three-orange-triangles.svg demo)
+ tesselate loops with more than three vertices (green-star.svg)
+ nested loops that form holes and islands (green-star-with-hole.svg works!)

